<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://java.sun.com/xml/ns/javaee"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		 http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		 version="3.0">
	<display-name>gtxt</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
            classpath*:spring-context.xml
            classpath*:spring-context-activiti.xml
            classpath*:spring-context-dubbo.xml
            classpath*:spring-context-jedis.xml
            classpath*:spring-context-shiro.xml
        </param-value>
	</context-param>

	<!-- 载入Spring ApplicationContext：自定义的WebContextListener继承了spring的启动监听org.springframework.web.context.ContextLoaderListener -->
	<listener>
		<listener-class>com.fortunes.javamg.modules.sys.listener.WebContextListener</listener-class>
	</listener>

	<!-- 使Spring支持request与session的scope 如:<bean id="loginAction" class="com.foo.LoginAction" scope="request"/> 
		当理需要使用手动管理action或者servlet的生命周期的时候，就需要配置RequestContextListener 
		其实这个然并卵配置很多时候为了从SpringMVC里：RequestContextHolder.getRequestAttributes()).getRequest()获取request对象 -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- Spring在web请求中定义UTF-8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name><!-- 表示设置request的编码 -->
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>	<!-- 表示是否同时设置response的编码 -->
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Shiro与Spring集成 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
			<!-- DelegatingFilterProxy作用是自动到spring容器查找名字为shiroFilter（filter-name）的bean并把所有Filter的操作委托给它。然后将ShiroFilter配置到spring容器即可:spring-context-shiro.xml -->
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 布局框架：SiteMesh 2.4 -->
	<filter>
		<filter-name>sitemeshFilter</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/admin/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/index/*</url-pattern>
	</filter-mapping>

	<!-- springMVC -->
	<servlet>
		<servlet-name>springServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath*:spring-mvc.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Restlet2.X 框架 -->
	<servlet>
		<servlet-name>RestletServlet</servlet-name>
		<servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
		<init-param>
			<param-name>org.restlet.application</param-name>
			<param-value>com.fortunes.javamg.modules.act.rest.ActRestApplication</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>RestletServlet</servlet-name>
		<url-pattern>/act/rest/service/*</url-pattern>
	</servlet-mapping>

	<!-- 启用Druid监控界面,所以要加这个servlet,通过 http://ip:port/projectName/druid/ 地址访问即可, -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		<init-param>
			<param-name>allow</param-name>
			<param-value>127.0.0.1</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	<!-- Druid 采集web-jdbc关联监控的数据：WebURI选项 (即监控每个URI执行了多少jdbc操作等等) -->
	<filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 启用文件管理插件：CKFinder -->
	<servlet>
		<servlet-name>CKFinderConnectorServlet</servlet-name>
		<!-- 自定义CKFinderConnectorServlet继承原来的com.ckfinder.connector.ConnectorServlet 这里做了一些文件夹创建的操作 -->
		<servlet-class>com.fortunes.javamg.common.web.CKFinderConnectorServlet</servlet-class>
		<init-param>
			<param-name>XMLConfig</param-name>
			<param-value>/WEB-INF/ckfinder.xml</param-value><!-- 指定CKFinder配置文件,默认的名字是config.xml -->
		</init-param>
		<init-param>
			<param-name>debug</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<param-name>configuration</param-name>
			<!-- 扩展CKFinder Configuration,自定义继承com.ckfinder.connector.configuration.Configuration 做权限 -->
			<param-value>com.fortunes.javamg.common.web.CKFinderConfig</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CKFinderConnectorServlet</servlet-name>
		<url-pattern>/static/ckfinder/core/connector/java/connector.java</url-pattern>
	</servlet-mapping>


	<filter>
		<filter-name>FileUploadFilter</filter-name>
		<filter-class>com.ckfinder.connector.FileUploadFilter</filter-class>
		<init-param>
			<param-name>sessionCookieName</param-name>
			<param-value>JSESSIONID</param-value>
		</init-param>
		<init-param>
			<param-name>sessionParameterName</param-name>
			<param-value>jsessionid</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>FileUploadFilter</filter-name>
		<url-pattern>/static/ckfinder/core/connector/java/connector.java</url-pattern>
	</filter-mapping>


	<servlet>
		<servlet-name>UserfilesDownloadServlet</servlet-name>
		<servlet-class>com.fortunes.javamg.common.servlet.UserfilesDownloadServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>UserfilesDownloadServlet</servlet-name>
		<url-pattern>/userfiles/*</url-pattern>
	</servlet-mapping>


	<servlet>
		<servlet-name>ValidateCodeServlet</servlet-name>
		<servlet-class>com.fortunes.javamg.common.servlet.ValidateCodeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ValidateCodeServlet</servlet-name>
		<url-pattern>/servlet/validateCodeServlet</url-pattern>
	</servlet-mapping>


	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/error/404.jsp</location>
	</error-page>
</web-app>